#!/usr/bin/env bash

declare VERSION="0.1.0"
declare -a _runs _mounts _ports _labels _environments _copys
declare _from _set_exec _workdir _user
declare build_script

function usage() {
  cat <<HELP
Usage: $(basename "$0") SCRIPT

Convert a script using 'acbuild' to a Dockerfile.

Options:
  -h, --help                      You're looking at it
  -v, --version                   Print version and exit
HELP
}

function bail() {
  >&2 echo "$*"
  exit 1
}

function acbuild() {
  while (( $# > 0 )); do
    case "$1" in
      write|set-name|set-group|end)
        break
        ;;
      --debug)
        shift
        ;;
      run)
        shift
        if [[ $1 = "--" ]]; then
          shift
        fi
        if [[ $1 != "getent" ]];then
          _runs+=("$*")
        fi
        break
        ;;
      mount)
        shift; shift; shift
        _mounts+=("$*")
        break
        ;;
      port)
        shift; shift; shift
        _ports+=("$*")
        break
        ;;
      set-exec)
        shift
        if [[ $1 = "--" ]]; then
          shift
        fi
        _set_exec="$*"
        break
        ;;
      set-user)
        _user="$2"
        break
        ;;
      set-working-directory)
        _workdir="$2"
        break
        ;;
      copy-to-dir)
        shift
        _copys+=("$*")
        break
        ;;
      label)
        shift; shift;
        _labels+=("$(join_by '=' "$@")")
        break
        ;;
      environment)
        shift; shift;
        _environments+=("$*")
        break
        ;;
      begin)
        if [[ -n $2 ]]; then
          _from=${2#docker://}
        fi
        break
        ;;
      *) bail "unknown option: $1"
        ;;
    esac
  done
}

function join_by() {
  local d=$1; shift; echo -n "$1"; shift; printf "%s" "${@/#/$d}";
}

function each-if() {
  local keyword=$1; shift
  local -a values=("$@")
  if [[ -n "${values[*]}" ]]; then
    for v in "${values[@]}"; do
      echo "$keyword $v" >> "$dockerfile"
    done
    echo >> "$dockerfile"
  fi
}

function echo-if() {
  local keyword=$1; shift
  local -a values=("$@")
  if [[ -n "${values[*]}" ]]; then
    echo "$keyword ${values[*]}" >> "$dockerfile"
    (( ${#values[@]} == 1 )) || echo >> "$dockerfile"
  fi
}

case "$1" in
  -h|--help) usage; exit 0 ;;
  -v|--version) echo "$VERSION"; exit 0 ;;
  "") usage; exit 1 ;;
  *)
    if [[ ! -e $1 ]]; then
      bail "'$1' doesn't exist"
    fi
    build_script="$1"
    ;;
esac

# shellcheck disable=SC1090
source "$build_script"

if [[ -z $_from ]]; then
  bail "missing FROM"
fi

dockerfile=$(mktemp)

echo -e "FROM $_from\n" >> "$dockerfile"

echo-if "LABEL" "${_labels[@]}"
echo-if "RUN" "$(join_by ' && ' "${_runs[@]}")" && echo >> "$dockerfile"
each-if "ADD" "${_copys[@]}"
each-if "VOLUME" "${_mounts[@]}"
echo-if "EXPOSE" "${_ports[@]}"
each-if "ENV" "${_environments[@]}"
echo-if "USER" "$_user"
echo-if "WORKDIR" "$_workdir" && echo >> "$dockerfile"
echo-if "CMD" "$_set_exec"

mv "$dockerfile" Dockerfile
